I"<p>In this project, we’re going to build a simple neural network from scratch, using NumPy.</p>

<p>We’ll build a shallow 2-layer neural network (one hidden and one output). This neural network will be trained on data from the MNIST handwritten digit dataset, and classify input images to digits.</p>

<p>The MNIST dataset consists of 28x28 grayscale images of handwritten digits. Each image is labelled with the digit it belongs to.</p>

<div class="md-image-container">
    <img class="post-image" src="/assets/images/mnist.png" height="auto" width="40%" />
</div>

<p>Here’s the structure for this project post:</p>

<p>1. Neural Network Overview</p>

<p>2. Describing the Neural Network Mathematically</p>

<p>2.1 Forward Propagation</p>

<p>2.2 Backward Propagation</p>

<p>3. Code Implementation</p>

<h2 id="1-neural-network-overview">1. Neural Network Overview</h2>

<p>Our Neural Network will have three layers in total - an input layer, a hidden layer and an output layer.</p>

<div class="md-image-container">
    <img class="post-image" src="/assets/images/nn_from_scratch.png" height="auto" width="60%" />
</div>

<p>The input layer has 784 nodes, which corresponds to the total number of pixels in each 28x28 input image from the MNIST dataset. Each pixel is described by a value between [0,255], which represents pixel intensity (white being 255, black being 0).</p>

<p>Next, to keep things simple, we’ll give the hidden layer 10 nodes. The value of these nodes is first calculated based on the weights and biases applied to the 784 nodes from the input layer, followed by a ReLU activation function.</p>

<p>Finally, the output layer will have 10 nodes, which corresponds to each output class. We have 10 possible digit values (0 to 9), so we have 10 output classes. The value of these nodes are first calculated based on the weights and biases applied to the 10 nodes from the hidden layer, followed by a Softmax activation function.</p>

<p>Then, the output layer will give us a column of 10 probability values, containing a value between [0,1] for each class.</p>

<p>We’ll then classify the image based on the digit class with the highest probability value.</p>

<h2 id="2-describing-the-neural-network-mathematically">2. Describing the Neural Network Mathematically</h2>

<p>In this section, we will formalize our neural network mathematically, so that we can reproduce relevant variables in code later.</p>

<p>We’ll begin by understanding the dimensionality of our variables.</p>

<p>Conventionally, our input data would stack the information for each image as rows of a matrix. However, because we will be doing matrix multiplication with weight vectors, we’ll transpose the conventional matrix to obtain our matrix $X$, which has image data as columns instead. Thus, matrix $X$ would have columns of height $784$, with $M$ total columns (where our input dataset has $M$ images, for example).</p>

<div class="md-image-container">
    <img class="post-image" src="/assets/images/nn_from_scratch2.png" height="auto" width="60%" />
</div>

:ET